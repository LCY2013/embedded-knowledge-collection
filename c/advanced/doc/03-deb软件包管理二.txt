【1】APT工作原理
   （1）Ubuntu采用集中式的软件仓库机制，将各式各样的软件包分门别类地存在软件仓库中，进行有效地组织和管理。
        然后将软件仓库置于许许多多的镜像服务器中，并保持基本一致，因此，对于用户，这些镜像服务器就是他们的软件源（reposity）
   
   （2）在Ubuntu系统中，使用软件源配置文件/etc/apt/sources.list列出最适合访问的镜像站点地址。
   
   （3）软件源配置文件只是告诉Ubuntu系统可以访问的镜像站点地址。但那些镜像站点都拥有什么软件资源并不清楚。
	若是每安装一个软件包，就在服务器上寻找一边，效率是很低的。因而就有必要为这些软件资源列出个清单（建立索引年文件），
	以便本地主机查询，这就是APT软件包管理器的工作原理。

   （4）/etc/apt/sources.list。本质就是一个普通的文本文件，就可以在超级管理员授权下，使用任何文本编辑器进行编辑。在该文件中，
	添加的软件源镜像站点称为一个配置项，并遵循以下格式：
	DebType AddressType://Hostaddress/Ubuntu Distribution Component1 Component2......
	deb http://cn.archive.ubuntu.com/ubuntu/ feisty main restricted universe multiverse

    (5) 根据软件包的开发组织对该软件的支持程度，以及遵从的开源程度，划分为如下四类：
	1）核心（Main）：官方维护的开源软件，是由Ubuntu官方完全支持的软件，包括大多数流行的、稳定的开源软件，是Ubuntu默认安装的基本软件包；
	2）公共（Universe）：社区维护的开源软件，是由Ubuntu社区的计算机爱好者维护的软件。这些软件包没有安全升级的保障。
			  用户在使用时，需要考虑这些软件包存在的不稳定性；
	3）受限（Restricted）:官方维护的非开源软件，是专供特殊用途，而且没有自由软件版权，不能直接修改软件，但依然被Ubuntu团队支持的软件；
	4）多元化（Multiverse）:非Ubuntu官方维护的非开源软件，用户的使用这些软件包时，需要特别注意版权问题。

   （6）刷新软件源
	1）修改了配置文件---/etc/apt/source.list，目的只是告知软件源镜像站点的地址。但那些所指向的镜像站点所具有的软件资源并不清楚，
	   需要将这些资源列个清单，以便本机主机知晓可以申请哪些资源。
        2）使用“apt-get update”命令会扫描每一个软件源服务器，并为该服务器所具有软件包资源建立索引文件，存放在本地的/var/lib/apt/lists目录中。
	

【2】软件管理相关工作
    （1）管理软件包
	 1）在Ubuntu Linux中，通常使用apt-get命令管理软件包，只需告知软件包名字，就可以自动完成软件包的获取、安装、编译和卸载，以及检查软件包依赖关系。
	 2）apt-get命令提供了一个软件包管理额命令行平台。在这个平台上使用更丰富的子命令，完成具体的管理任务。
		apt-get subcommands [-d|-f|-m|-q|--purge|--reinstall|-b|-s|-y|-u|-h|-v] pkg
     (2) 修复软件包依赖关系
	 1）如果由于故障而中断软件安装过程，可能会造成关联的软件包只有部分安装。之后，用户就会发现该软件既不能重装又不能删除。
	 2）作为组合命令，下面前者用于检查软件包依赖关系，后者用于修复依赖关系。
		“apt-get check”--“apt-get -f install”
	 3) 在处理依赖关系上，apt-get会自动下载并安装具有依赖关系（depends）的软件包，但不会处理与安装软件包存在推荐（recommends）和建议（suggests关系的软件包。
    （3）更新软件包
	 1）在Ubuntu Linux中，只需使用命令“apt-get upgrade”就可以轻松地将系统中的所有软件包一次性升级到最新版本
    （4）安装软件包
	 1）在准备好软件源并连通网络后，用户只需告知安装软件的名称，“apt-get install”命令就可以轻松完成整个安装过程，而无需考虑软件包的版本、优先级、依赖关系等
	 2）使用“apt-get install”下载软件包大体分为四步：
		STEP1: 扫描本地存放的软件包更新列表（有apt-get update命令刷新更新列表），找到最新版本的软件包
		STEP2: 进行软件包依赖关系检查，找到支持该软件正常运行的所有软件包；
		STEP3: 从软件源所指的镜像站点中，下载相关软件包；
		STEP4: 解压软件包，并自动完成应用程序的安装和配置。
    （5）重新安装软件包
	 当用户不小心损坏了已经安装的软件包，而需要修复。或者，希望重新安装软件包中某些文件的最新版本，可以重新安装软件包
    （6）卸载软件包
	 1）不完全卸载
	 “apt-get remove”会关注那些与被删除的软件包相关的其它软件包，删除一个软件包时，将会连带删除与该软件包有依赖关系的软件包。
	 2）完全卸载
	 “apt-get --purge remove”命令在卸载软件包文件的同时，还删除该软件包所使的配置文件。
    （7）清理软件包缓冲区
	 1）如果用户认为软件包缓冲区中的文件没有任何价值了，有必要删除全部下载的软件包。可以使用“apt-get clean”清理整个软件包缓冲区，除了lock锁文件和partial目录。
	    缓冲目录：  /var/cache/apt/archives
            清理命令：  sudo apt-get clean
	 2）按照依赖关系清理缓冲区中多余的软件包
		如果用户希望缓冲区中只保留最新版本的软件包，多余版本全部清楚，可以使用“apt-get sutoclean”命令。
    （8）查询软件包信息
	 1) 使用apt-cache命令完成查询软件源和软件包的相关信息。
		apt-cache subcommands [-p|-s|-q|-i|-c|-h] pkg
	 2) 使用“apt-cache show”命令获取指定软件包的详细信息，包括软件包安装状态、优先级、适用架构、版本、存在依赖关系的软件包，以及功能描述。该命令可以同时显现多个软件包的详细信息。
    （9）获取软件包安装状态
	 1）使用“apt-cache policy”可以获取软件包当前的安装状态
	 2）如果用户仅想了解某个软件包依赖于哪些软件包，可以使用“apt-cache depends”命令
	 3）如果用户仅想了解某个软件包被哪些软件包所依赖，可以使用“apt-cache rdepends”命令。


【3】总结与思考
    （1）本节课主要讲解了APT软件包管理器的工作原理及主要命令
    （2）下列文件什么作用？
		/etc/apt/sources.list
		/var/lib/apt/lists/*
		/var/cache/apt/archives
	


